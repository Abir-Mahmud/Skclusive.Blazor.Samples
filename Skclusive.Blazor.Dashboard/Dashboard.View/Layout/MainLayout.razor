@inherits LayoutComponentBase
@implements IDisposable
@inject MediaQueryMatcher MediaQueryMatcher
@inject IViewConfig ViewConfig

<div class="@RootClass">
    <MainTopbar OnSidebarOpen="@HandleSidebarOpen" />
    <Sidebar
        OnClose="@HandleSidebarClose"
        Open="@SidebarOpen"
        Variant="@SidebarVariant"
    />
    <main class="@ContentClass">
        @Body
        <Footer />
    </main>
</div>

@code
{
    private bool IsDesktop { set; get; } = false;

    private bool SidebarOpen { set; get; } = false;

    private string RootClass => "main-layout-root" + (IsDesktop ? " main-layout-shift-content" : "");

    private string ContentClass => "main-layout-content";

    private DrawerVariant SidebarVariant => IsDesktop ? DrawerVariant.Persistent : DrawerVariant.Temporary;

    private IDisposable TimeoutDisposal { set; get; }

    private void HandleSidebarClose()
    {
        SidebarOpen = false;

        StateHasChanged();
    }

    private void HandleSidebarOpen()
    {
        SidebarOpen = true;

        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        MediaQueryMatcher.OnChange += OnMediaQueryChanged;

        if (ViewConfig.Responsive)
        {
            TimeoutDisposal = ExecutionPlan.Delay(500, () => {
                _ = MediaQueryMatcher.RegisterAsync("(min-width:1280px)");
            });
        }

        return Task.CompletedTask;
    }

    private void OnMediaQueryChanged(object sender, bool match)
    {
        IsDesktop = match;

        SidebarOpen = IsDesktop;

        StateHasChanged();
    }

    public void Dispose()
    {
        TimeoutDisposal?.Dispose();

        MediaQueryMatcher.OnChange -= OnMediaQueryChanged;

        _ = MediaQueryMatcher.UnRegisterAsync();
    }
}
